#######################
ou sur la carte :
root@SmagYun:~# mkdir pot2web
root@SmagYun:~# cd pot2web
root@SmagYun:~/pot2web# npm init
^Croot@SmagYun:~/pot2web# ls
root@SmagYun:~/pot2web# ls
root@SmagYun:~/pot2web# npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sane defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg> --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (pot2web)
version: (0.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to /root/pot2web/package.json:

{
  "name": "pot2web",
  "version": "0.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes)
root@SmagYun:~/pot2web#
[[[opkg install node node-express node-socket.io node-serialport ideino ideinoIO node-ideino-linino-lib]]]

opkg install node node-express node-socket.io


vi index.js :
```
///////////////////////////////////////////////////////////
// GESTION NODE EXPRESS SERVEUR
///////////////////////////////////////////////////////////
var express = require('express');
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var port = process.env.PORT || 3005;


// Routing
app.use(express.static(__dirname + '/public'));

//LANCEMENT SERVEUR
server.listen(port, function () {
	console.log('Server listening at port %d', port);
});

```

mkdir public && cd public && vi index.html
```
<!DOCTYPE html>
<html>
  <body>

  <script src="/socket.io/socket.io.js"></script>
  <script>
	var socket = io();
	console.log(socket);
  </script>
  </body>
</html>
```
test avec node .
voir console.log
opkg install node-ideino-linino-lib

Modifier index.js
```
///////////////////////////////////////////////////////////
// GESTION NODE EXPRESS SERVEUR
///////////////////////////////////////////////////////////
var express = require('express');
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var port = process.env.PORT || 3005;

///////////////////////////////////////////////////////////
// GESTION DES COMMANDES LINUX comme reboot
///////////////////////////////////////////////////////////
//var exec = require('child_process').exec;

///////////////////////////////////////////////////////////
// GESTION DE LA CARTE ARDUINO
///////////////////////////////////////////////////////////
var linino = require('ideino-linino-lib'),
board = new linino.Board(),
html = new linino.Htmlboard();
//var servoH = { pin: board.pin.servo.S9, value : 180 };
//var pin13 = board.pin.digital.D13;
var pot = board.pin.analog.A0;

// Routing
app.use(express.static(__dirname + '/public'));

//LANCEMENT SERVEUR
server.listen(port, function () {
	console.log('Server listening at port %d', port);
	console.log('potentiometre : A0');

});
board.connect(function(){
	console.log('CARTE Connected');
	io.on('connection', function (socket) {
		console.log("CLIENT connected");


		board.analogRead(pot, function(value){
			console.log('value: ' + value);
		//	var data = {"AO": value};
			socket.emit('update', value);
		});
	});

});
```
ainsi que public/index.html :
```
<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0>
    <style> body {padding: 0; margin: 0;} </style>
    <script src="lib/p5.min.js"></script>
    <script src="lib/addons/p5.dom.min.js"></script>
    <script src="lib/addons/p5.sound.min.js"></script>
    <script src="js/sketch.js"></script>
  </head>
  <body>

  <script src="/socket.io/socket.io.js"></script>
  <script>
	var socket = io();
	console.log(socket);
	socket.on('update', function (data) {
		console.log(data);
	});

  </script>
  </body>
</html>
```
avec public/js/sketch.js :
```
var diametre = 0


function setup() {
	canvas = createCanvas(windowWidth, windowHeight);
	console.log("ready");
	console.log(socket);
  	socket.on('update', function (data) {
		console.log(data);
		//var json = JSON.parse(data);
		diametre = data;
		console.log(diametre);
	});
}

function draw() {
	var color = map(diametre,0,1023,0,255);
	background(color);
	noStroke();
	fill(255-color);
	ellipse(width/2,height/2,diametre,diametre);
}
```
Telecharger P5js et inclure les les fichiers dans public/lib en respectant la structure utilisée ici :
https://github.com/scenaristeur/lininoapps/tree/master/root/pot2web







########################



Le moyen le plus simple pour créer une application pour la carte SmagYun, (Arduino Yùn, avec lininoio)
Environnement un pc sous Windows 10
prérequis : dernière version de nodejs (avec npm)
- Lancer une fenêtre DOS, en passant par Cortana et en tapant 'cmd'
- Créer un dossier pot2web et vous déplacer dedans
mkdir pot2web
cd pot2web
- Créer une application nodejs
npm init






#####################
C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel>mkdir pot2web

C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel>cd pot2web

C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (pot2web)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web\package.json:

{
  "name": "pot2web",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes)


###############################
- Ceci initialise votre application avec un fichier package.json
- Installer les packages de base pour créer une application Web : express & socket.io :
npm install --save express socket.io
- Le fichier package.json est modifié pour inclure ces changements, un dossier 'node_modules' est crée incluant les deux modules ainsi que leur dépendances.
 (un fichier 'package-lock.json' peut également être créé si votre version de nodejs est récente).

##############################
C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web>npm install --save express socket.io
npm WARN registry Using stale data from https://registry.npmjs.org/ because the host is inaccessible -- are you offline?npm WARN registry Using stale package data from https://registry.npmjs.org/ due to a request error during revalidation.

> uws@0.14.5 install C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web\node_modules\uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN pot2web@1.0.0 No description
npm WARN pot2web@1.0.0 No repository field.

+ socket.io@2.0.4
+ express@4.16.2
added 81 packages in 36.862s

C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web>

###################################
- Créer, grâce à votre éditeur de texte préféré un fichier 'index.js' à la racine du projet, au même niveau que le fichier package.json
C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web>atom index.js

- Le fichier 'index.js' constitue notre serveur web, et c'est lui qui fera la liaison entre la page web et la carte Arduino Yùn.
- Commencez par inclure dans ce fichier les lignes suivantes (nous verrons un peu plus loin à quoi sert ce code):
```
///////////////////////////////////////////////////////////
// GESTION NODE EXPRESS SERVEUR
///////////////////////////////////////////////////////////
var express = require('express');
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var port = process.env.PORT || 3005;


// Routing
app.use(express.static(__dirname + '/public'));

//LANCEMENT SERVEUR
server.listen(port, function () {
	console.log('Server listening at port %d', port);
});

```
- Ceci va permettre de créer un serveur web et d'afficher une page Web, mais pour ce faire, il va nous falloir une page Web, dans un dossier 'public'.
- Au même niveau que votre fichier index.js, créez un dossier nommé 'public' et créez à l'intérieur de celui-ci une page web 'index.html'
mkdir public
cd public
atom index.html
- Insérer le code minimal pour une communication bi-directionnelle instantanée (socket.io) entre une page web et un serveur
```
<!DOCTYPE html>
<html>
  <body>

  <script src="/socket.io/socket.io.js"></script>
  <script>
	var socket = io();
	console.log(socket);
  </script>
  </body>
</html>
```
- Tester le serveur web et la page web nouvellement créé :
C:\Users\Smag\Documents\dev\smagyun\lininoapps\root\pot2web\tutoriel\pot2web>node .
Server listening at port 3005

(vous pouvez utiliser 'Ctrl+C' pour stopper le serveur Web)
- Ceci vous indique que votre serveur web écoute sur le port 3005, rendez-lui donc visite grâce à votre navigateur préféré (Chrome, Firefox, ou Edge) à l'adresse http://127.0.0.1:3005 ou http://localhost:3005
Et oh Magic ! rien ne se passe ! Si si , mais c'est caché ... tout se passe dans la console Web pour l'instant, vous pouvez y accéder en tapant 'Ctrl+Maj+I', en sélectionnant console, et en actualisant la page.
(ne pas tenir compte du message d'erreur au sujet de favicon.ico, c'est l'icone de votre site web et a peu d'importance à ce stade.)

 # Mais que se passe-t-il ?

Bon ok, pas grand chose... et pourtant, le coeur de notre application est là :
Dans notre page web, nous avons deux balises <sript.... </script>.
la première charge la librairie socket.io (  <script src="/socket.io/socket.io.js"></script> ),
dans la deuxième,
(  <script>
	var socket = io();
	console.log(socket);
  </script>
  )
  on créé une variable socket à partir de la function io() inclue dans cette librairie, et on demande à l'afficher dans la console via la fonction 'console.log()', et c'est ce qui apparait dans la console de votre page web.
Cette variable socket est comme un tunnel bidirectionnel entre notre page web et notre serveur web...
On a d'ailleurs l'équivalent dans le code de notre serveur Web, rappelez-vous dans le code du serveur, on avait une ligne :
var io = require('socket.io')(server);
Une instance créée de chaque côté, notre serveur peut envoyer des infos à la page web, et inversement.....


# Mais quelles infos ???

Pour ce projet, nous étions partis sur l'idée de récupérer la valeur d'un potentiometre pour l'afficher, ou agir dans la page web.
Arrêter le servur Web si nécessaire (Ctrl+C)
Branchez donc un potentiometre sur la pin A0 de votre carte Arduino Yun.
installez la librairie 'ideino-linino-lib', retournez à la racine du site et lancez comme précédemment 'npm install --save ideino-linino-lib'
